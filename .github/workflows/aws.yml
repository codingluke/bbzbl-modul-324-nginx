name: Setup and deploy to Amazon

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: us-east-1 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: m32c4/ecr-repository # set this to your Amazon ECR repository name

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: aws

    steps:
      # - name: Test
      #   env:
      #     AUTHOR: ${{ github.event.commits[0].author.name }}
      #     PR_AUTHOR: ${{ github.event.pull_request.user.login }}
      #   run: echo $AUTHOR

      - name: Checkout
        uses: actions/checkout@v4

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.2

      ### Infrastructure

      - name: Terraform plan and apply
        working-directory: terraform
        env:
          AWS_SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        shell: bash
        run: |
          bash deploy.sh

      - name: Set up Ruby for Kamal
        uses: ruby/setup-ruby@v1
        env:
          BUNDLE_GEMFILE: ./kamal/Gemfile
        with:
          ruby-version: 3.2.2
          bundler-cache: true

      - name: Expose GitHub environment as shell variables
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          to_envs() { jq -r "( . // {} ) | to_entries[] | \"\(.key)<<$EOF\n\(.value)\n$EOF\n\""; }
          echo "$VARS_CONTEXT" | to_envs >> $GITHUB_ENV
          echo "$SECRETS_CONTEXT" | to_envs >> $GITHUB_ENV

      - name: Bootstrap Kamal
        working-directory: kamal
        env:
          KAMAL_SERVER_IP: ${{ env.SERVER_IP }}
          KAMAL_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          KAMAL_REGISTRY_PASSWORD: ${{ steps.login-ecr.outputs[format('docker_password_{0}_dkr_ecr_us_east_1_amazonaws_com', secrets.AWS_ACCOUNT_ID)] }}
        run: |
          # Ensures that all Servers have docker installed
          bundle exec kamal server bootstrap
          # Push the environment variables to the servers
          bundle exec kamal env push

      # INFO: Uncomment to add mysql to the server
      #       Also add all envs defiend in the deploy.yml as GitHub Environment vars.
      # - name: Boot Mysql
      #   working-directory: kamal
      #   env:
      #     KAMAL_SERVER_IP: ${{ env.SERVER_IP }}
      #     KAMAL_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     KAMAL_REGISTRY_PASSWORD: ${{ steps.login-ecr.outputs[format('docker_password_{0}_dkr_ecr_us_east_1_amazonaws_com', secrets.AWS_ACCOUNT_ID)] }}
      #   run: |
      #     if [ $(bundle exec kamal accessory details mysql | grep -c "Accessory mysql") -eq 1 ]
      #     then
      #       echo "Mysql already booted."
      #       bundle exec kamal accessory restart mysql
      #     else
      #       bundle exec kamal accessory boot mysql
      #     fi

      ### Build and Deploy

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Kamal deploy image
        working-directory: kamal
        env:
          KAMAL_SERVER_IP: ${{ env.SERVER_IP }}
          KAMAL_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          KAMAL_REGISTRY_PASSWORD: ${{ steps.login-ecr.outputs[format('docker_password_{0}_dkr_ecr_us_east_1_amazonaws_com', secrets.AWS_ACCOUNT_ID)] }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # --skip-push           tell kamal to not build the image
          # --verbose             more detailed logging
          # --version=$IMAGE_TAG  we set the tag to deploy which has been already pushed before
          #
          # bundle exec kamal setup --skip-push --version=$IMAGE_TAG
          bundle exec kamal deploy --skip-push --verbose --version=$IMAGE_TAG
